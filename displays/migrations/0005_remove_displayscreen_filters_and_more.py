# Generated by Django 5.2.4 on 2025-09-20 17:41

import datetime

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0004_alter_course_options_alter_course_code_and_more"),
        ("displays", "0004_delete_displaymessage"),
        ("locations", "0005_building_unique_building_title_per_institution"),
        (
            "professors",
            "0002_alter_professor_options_alter_professor_created_at_and_more",
        ),
        ("semesters", "0002_alter_semester_options_alter_semester_created_at_and_more"),
    ]

    def _migrate_filter_data(apps, schema_editor):
        DisplayScreen = apps.get_model("displays", "DisplayScreen")
        Classroom = apps.get_model("locations", "Classroom")
        Course = apps.get_model("courses", "Course")
        Professor = apps.get_model("professors", "Professor")
        Semester = apps.get_model("semesters", "Semester")

        def _parse_date(value):
            if isinstance(value, datetime.date):
                return value
            if isinstance(value, str) and value:
                try:
                    return datetime.date.fromisoformat(value)
                except ValueError:
                    return None
            return None

        for screen in DisplayScreen.objects.all():
            filters = []
            raw_filters = getattr(screen, "filters", None)
            if isinstance(raw_filters, list):
                filters = raw_filters

            chosen = None
            for entry in filters:
                if entry.get("is_active", True):
                    chosen = entry
                    break
            if chosen is None and filters:
                chosen = filters[0]
            if not chosen:
                continue

            updates = {
                "filter_title": (chosen.get("title") or ""),
                "filter_is_active": bool(chosen.get("is_active", True)),
            }

            classroom_id = chosen.get("classroom")
            if classroom_id and Classroom.objects.filter(pk=classroom_id).exists():
                updates["filter_classroom_id"] = classroom_id

            course_id = chosen.get("course")
            if course_id and Course.objects.filter(pk=course_id).exists():
                updates["filter_course_id"] = course_id

            professor_id = chosen.get("professor")
            if professor_id and Professor.objects.filter(pk=professor_id).exists():
                updates["filter_professor_id"] = professor_id

            semester_id = chosen.get("semester")
            if semester_id and Semester.objects.filter(pk=semester_id).exists():
                updates["filter_semester_id"] = semester_id

            day_of_week = chosen.get("day_of_week") or None
            updates["filter_day_of_week"] = day_of_week or None

            week_type = chosen.get("week_type") or None
            updates["filter_week_type"] = week_type or None

            date_override = _parse_date(chosen.get("date_override"))
            if date_override:
                updates["filter_date_override"] = date_override

            duration = chosen.get("duration_seconds")
            try:
                duration_value = int(duration) if duration is not None else 0
            except (TypeError, ValueError):
                duration_value = 0
            if duration_value < 0:
                duration_value = 0
            updates["filter_duration_seconds"] = duration_value

            DisplayScreen.objects.filter(pk=screen.pk).update(**updates)

    operations = [
        migrations.AddField(
            model_name="displayscreen",
            name="filter_classroom",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="display_screens",
                to="locations.classroom",
                verbose_name="کلاس",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_course",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="display_screens",
                to="courses.course",
                verbose_name="درس",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_date_override",
            field=models.DateField(blank=True, null=True, verbose_name="تاریخ جایگزین"),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_day_of_week",
            field=models.CharField(
                blank=True,
                choices=[
                    ("شنبه", "شنبه"),
                    ("یکشنبه", "یکشنبه"),
                    ("دوشنبه", "دوشنبه"),
                    ("سه\u200cشنبه", "سه\u200cشنبه"),
                    ("چهارشنبه", "چهارشنبه"),
                    ("پنجشنبه", "پنجشنبه"),
                    ("جمعه", "جمعه"),
                ],
                max_length=16,
                null=True,
                verbose_name="روز هفته",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_duration_seconds",
            field=models.PositiveIntegerField(
                default=0, verbose_name="مدت نمایش (ثانیه)"
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_is_active",
            field=models.BooleanField(default=True, verbose_name="فیلتر فعال است؟"),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_professor",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="display_screens",
                to="professors.professor",
                verbose_name="استاد",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_semester",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="display_screens",
                to="semesters.semester",
                verbose_name="ترم",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_title",
            field=models.CharField(
                blank=True,
                default="",
                help_text="عنوان نمایشی برای فیلتر انتخابی.",
                max_length=255,
                verbose_name="عنوان فیلتر",
            ),
        ),
        migrations.AddField(
            model_name="displayscreen",
            name="filter_week_type",
            field=models.CharField(
                blank=True,
                choices=[("هرهفته", "هرهفته"), ("فرد", "فرد"), ("زوج", "زوج")],
                max_length=16,
                null=True,
                verbose_name="نوع هفته",
            ),
        ),
        migrations.RunPython(_migrate_filter_data, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="displayscreen",
            name="filters",
        ),
    ]
